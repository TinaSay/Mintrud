<?php
/**
 * Created by PhpStorm.
 * User: user
 * Date: 05.04.2017
 * Time: 17:39
 */

namespace app\behaviors;


use yii\base\Behavior;
use yii\base\InvalidConfigException;
use yii\db\ActiveRecord;
use yii\db\BaseActiveRecord;

/**
 *
 * use SuperClosure\SerializableClosure; // library https://github.com/jeremeamia/super_closure
 * or
 * use Opis\Closure\SerializableClosure // library http://www.opis.io/closure/3.x/index
 *
 * Class RelationBehavior
 *
 *  ```php
 *  class Model extends \yii\base\Model
 *  {
 *      public function behaviors() {
 *          return [
 *              [
 *                  'class' => RelationBehavior::className(),
 *                  'attribute' => 'attribute',
 *                  'relation' => 'relation',
 *                  'link' => new SerializableClosure(function () {
 *                      return Child::find()->andWhere(['IN', Child::tableName() . '.[[id]]', $IDs])->all();
 *                  }),
 *                  'unlink' => new SerializableClosure(function () {
 *                      return ChildParent::find()
 *                          ->select([ChildParent::tableName().'[[child_id]]'])
 *                          ->andWhere([ChildParent::tableName() . '.[[parent_id]]' => $this->id])
 *                          ->column();
 *                  })
 *              ]
 *          ]
 *      }
 *  }
 *  ```
 *
 * @package app\behaviors
 */
class RelationBehavior extends Behavior
{
    /** @var ActiveRecord */
    public $owner;
    /**
     * @var
     */
    public $attribute;
    /**
     * @var
     */
    public $relation;
    /**
     * @var
     */
    public $link;

    /**
     * @var
     */
    public $unlink;

    /**
     * @return array
     * @throws InvalidConfigException
     */
    public function events()
    {
        if (is_null($this->attribute)) {
            throw new InvalidConfigException('The "attribute" property must be set');
        }
        if (is_null($this->relation)) {
            throw new InvalidConfigException('The "relation" property must be set');
        }
        if (is_null($this->link)) {
            throw new InvalidConfigException('The "link" property must be set');
        }
        if (is_null($this->unlink)) {
            throw new InvalidConfigException('The "unlink" property must be set');
        }
        return [
            BaseActiveRecord::EVENT_AFTER_INSERT => 'afterInsert',
            BaseActiveRecord::EVENT_AFTER_UPDATE => 'afterUpdate',
        ];
    }


    /**
     *
     */
    public function afterInsert()
    {
        $IDs = $this->owner->{$this->attribute};
        if (is_array($IDs)) {
            $this->insert($IDs);
        }
    }

    /**
     *
     */
    public function afterUpdate()
    {
        $IDs = $this->owner->{$this->attribute};
        if ($IDs === '') {
            $IDs = [];
        }
        if (is_array($IDs)) {
            $oldIDs = call_user_func($this->unlink);
            $this->insert(array_diff($IDs, $oldIDs));

            $models = call_user_func($this->link, array_diff($oldIDs, $IDs));
            foreach ($models as $model) {
                $this->owner->unlink($this->relation, $model, true);
            }
        }
    }

    /**
     * @param array $IDs
     */
    private function insert(array $IDs)
    {
        $models = call_user_func($this->link, $IDs);
        foreach ($models as $model) {
            $this->owner->link($this->relation, $model);
        }
    }

    /**
     * @inheritdoc
     */
    public function hasMethod($name)
    {
        if ('populate' . ucfirst($this->attribute) === $name) {
            return true;
        }
        return parent::hasMethod($name); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function __call($name, $params)
    {
        if ('populate' . ucfirst($this->attribute) === $name) {
            return $this->populate();
        }
        return parent::__call($name, $params); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    private function populate()
    {
        $this->owner->{$this->attribute} = call_user_func($this->unlink);
    }
}